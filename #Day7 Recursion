Code 1:Code to check whether array is sorted or not
========================================================================================

public class SortedOrNot {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
int arr[]= {1,2,6,4,5};
System.out.println(sorting(arr,0));
	}
	public static boolean sorting(int[] arr,int index) {
		if(index==arr.length-1)
			return true ;
		return (arr[index]<arr[index+1])&&sorting(arr,index+1);
	}

}
==========================================================================================
Code 2: Linear Search using Recursion

public class LinearSearch {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int arr[]= {1,4,2,5,6,7,16};
		System.out.print(linearSearch(arr,3,0));
		System.out.print(linearSearch1(arr,3,0));
		System.out.println( findIndexFromLast(arr,4,arr.length-1));

	}

	
	public static  boolean linearSearch(int arr[],int target,int index) {
		
		if(index==arr.length) {
			return false;
		}
		return arr[index]==target||linearSearch(arr,target,index+1);
	}
	
	static int linearSearch1(int arr[],int target,int index) {
		if(index==arr.length) {
			return -1;
		}
		if(arr[index]==target) {
			return index;
		}
		return linearSearch1(arr,target,index+1);
	}
	
	static int findIndexFromLast(int arr[],int target,int index) {
		if(index==-1) {
			return -1;
		}
		if(arr[index]==target) {
			return index;
		}
		return findIndexFromLast(arr,target,index-1);
	}
}

Time Complexity:O(N)
Space Complexity: O(N)
