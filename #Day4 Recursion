Code 1: Java Code to find Sum of n natural numbers
==================================================================

import java.util.Scanner;

public class sum {
	public static int sum(int n) {
		if(n==1)
			return 1;
		int partialans=sum(n-1);
			return n+partialans;
	}
	

	public static void main(String[] args) {
		 Scanner scan = new Scanner(System.in);
	      System.out.print("Enter n value: ");
	     int  n = scan.nextInt();
	     System.out.println("Sum of n natural number is:"+sum(n));

	}

}
Time Complexity: O(n)-->Number of nodes in a Tree
Space Complexity:O(n)-->Height of the Tree

==============================================================================================================

Code 2:Power x^n(Stack height = n)

==============================================================================================================
import java.util.Scanner;

public class Power {
	public static long power(long x,long n) {
		if(n==0)
			return 1;
		long partialAns=power(x,n-1);
		return x*partialAns;
	}

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		long x=sc.nextLong();
		long n=sc.nextLong();
		System.out.println("Power of a given number is:"+power(x,n));
	}

}

Time Complexity:O(n)
Space Complexity:O(n)
===========================================More Optimized solution for Power Code===============================
import java.util.Scanner;

public class Power {
	

		public static long Pow(long x, long n) {
		// base condition
		if(n==0) return 1;

	        long temp=Pow(x,n/2); // recursion call

	        // if N is odd then we will have to multiply X
	        if(n%2==1) return temp*temp*x;
	        return temp*temp;
		}
	
 public static void main(String[] args) {
	 Scanner scan = new Scanner(System.in);
     System.out.print("Enter x value: ");
     long x=scan.nextLong();
     System.out.print("Enter n value: ");
   long  n = scan.nextInt();
   System.out.println(Pow(x,n));
	/*
	    time complexity : O(log n)
	    space complexity : O(log n)
	*/


}
}


