Code 1: Java program to find the reverse of a number using helper function
===============================================================================================
public class Reverse {

	public static void main(String[] args) {
		System.out.println(rev(1234));

	}
	static int rev(int n) {
		int digits=(int)Math.log10(n)+1;
		return helper(n,digits);
	}
	private static int helper(int n, int digits) {
		if(n%10==n)
		 return n;
		int rem=n%10;
		return (int) (rem*Math.pow(10, digits-1)+helper(n/10,digits-1));
	}

}
Output:4321


---------------------------------------------------------------------------
Code 2: Java program to count the number of zeros in the given number using recursion
===================================================================================
public class CountNumberOfZeros {

	public static void main(String[] args) {
		System.out.println(countZero(30201));

	}
	public static int countZero(int n) {                                 
		int c=0;
		return helper(n, c);
	}
	private static int helper(int n,int c) {
		if(n==0)
		  return c;
		int rem=n%10;
		if(rem==0)
			return helper(n/10,c+1);
		return helper(n/10,c);
	}
	
	

}

output:2
=========================================================================================
Code 3:Code to calculate the number of steps required to reduce the given number to 0

public class StepCount {

	public static void main(String[] args) {
		System.out.println(stepsCount(41));

	}
	public static int stepsCount(int num) {
		int steps=0;
		return helper(num,steps);
	}
	private static int helper(int num, int steps) {
		if(num==0)
		 return steps;
		if(num%2==0)
		 return helper(num/2,steps+1);
		
		return helper(num-1,steps+1);
	}

}
output:8
===================================================================================
Code 4:   Binary Search using Recursion

import java.util.Scanner;

public class BinarySearch {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
int arr[]= {1,2,3,4,5};
Scanner sc=new Scanner(System.in);
System.out.println("Enter the target");
int target=sc.nextInt();
System.out.println(search(arr,target,0,arr.length-1));
		
		
	}
	public static int search(int[] arr,int target,int s,int e) {
		if(s>e) {
			return -1;}
		int m=s+(e-s)/2;
		if(target==arr[m])
			return m;
		if(target>arr[m])
			return search(arr,target,m+1,e);
		return search(arr,target,s,m-1);
		
	}

}
--->Output--->Code will return the index of asked target number in the array.
Time Complexity:O(logN)
Space Complexity:O(logN)
